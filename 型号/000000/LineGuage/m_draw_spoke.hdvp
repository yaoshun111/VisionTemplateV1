<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.05.0.0">
<procedure name="m_draw_spoke">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="Revolution" base_type="ctrl" dimension="0"/>
<par name="DetectHeight" base_type="ctrl" dimension="0"/>
<par name="DetectWidth" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ROIRows" base_type="ctrl" dimension="0"/>
<par name="ROICols" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>*提示</c>
<l>dev_get_window (WindowHandle)</l>
<l>disp_message (WindowHandle, '1、画一个圆弧,点击右键确认', 'window', 12, 12, 'red', 'false')</l>
<c></c>
<l>draw_circle (WindowHandle, Row1, Column1, Radius)</l>
<l>gen_circle_contour_xld (ContCircle, Row1, Column1, Radius, 0, 6.28318, 'positive', Revolution)</l>
<l>get_contour_xld (ContCircle, ROIRows, ROICols)</l>
<c>*至少要4个点</c>
<l>tuple_length (ROIRows, Length1)</l>
<l>if(Length1&lt;4)</l>
<l>    disp_message (WindowHandle, '提示：点数太少，请重画', 'window', 32, 12, 'red', 'false')</l>
<l>    ROIRows:=[]</l>
<l>    ROICols:=[]</l>
<l>    return()</l>
<l>endif   </l>
<c></c>
<c>*产生xld </c>
<l>gen_contour_polygon_xld(Contour, ROIRows, ROICols)</l>
<c>*用回归线法（不抛出异常点，所有点权重一样）拟合圆</c>
<l>fit_circle_contour_xld (Contour, 'algebraic', -1, 0, 0, 1, 2, RowC, ColumnC, Radius, StartPhi, EndPhi, PointOrder)</l>
<c>*根据拟合结果产生xld，并保持到显示对象</c>
<l>gen_circle_contour_xld (ContCircle, RowC, ColumnC, Radius, StartPhi, EndPhi, PointOrder, Revolution)</l>
<l>gen_empty_obj(Regions)</l>
<l>concat_obj(Regions, ContCircle, Regions)</l>
<c></c>
<c>*获取圆或圆弧xld上的点坐标</c>
<l>get_contour_xld (ContCircle, RowXLD, ColXLD)</l>
<c>*显示图像和圆弧</c>
<l>*dev_display(Image)</l>
<l>dev_display(ContCircle)</l>
<c>*产生并显示圆心</c>
<l>gen_cross_contour_xld(Cross, RowC, ColumnC, 60, 0.785398)</l>
<l>dev_display(Cross)</l>
<c>*提示</c>
<l>disp_message (WindowHandle, '2、远离圆心，画箭头确定边缘检测方向，点击右键确认', 'window', 12, 12, 'red', 'false') </l>
<c>*画线，确定检测方向</c>
<l>draw_line(WindowHandle, Row1, Column1, Row2, Column2) </l>
<c>*求圆心到检测方向直线起点的距离</c>
<l>distance_pp(RowC, ColumnC, Row1, Column1, DistanceStart)</l>
<c>*求圆心到检测方向直线终点的距离</c>
<l>distance_pp(RowC, ColumnC, Row2, Column2, DistanceEnd)</l>
<c></c>
<c>*求圆或圆弧xld上的点的数量</c>
<l>tuple_length(ColXLD, Length2)</l>
<c>*判断检测的边缘数量是否过少</c>
<l>if(Length2&lt;3)</l>
<l>    ROIRows:=[]</l>
<l>    ROICols:=[]</l>
<l>    disp_message (WindowHandle, '检测的边缘数量太少，请重新设置Revolution!', 'window', 52, 12, 'red', 'false')</l>
<l>    return()</l>
<l>endif  </l>
<c>*如果xld是圆弧，有Length2个点，从起点开始，等间距（间距为Length2/(Elements-1)）取Elements个点，作为卡尺工具的中点</c>
<c>*如果xld是圆，有Length2个点，以0°为起点，从起点开始，等间距（间距为Length2/(Elements)）取Elements个点，作为卡尺工具的中点</c>
<l>for i := 0 to Length2-1 by 1</l>
<c>    </c>
<l>    if(RowXLD[0]=RowXLD[Length2-1])</l>
<c>        *xld的起点和终点坐标相对，为圆</c>
<l>        tuple_int(1.0*Length2/(Length2)*(i), j)</l>
<c>        </c>
<l>    else</l>
<c>        *否则为圆弧</c>
<l>        tuple_int(1.0*Length2/(Length2-1)*(i), j)</l>
<l>    endif</l>
<c>    *索引越界，强制赋值为最后一个索引</c>
<l>    if(j&gt;=Length2)</l>
<l>        j:=Length2-1</l>
<l>*         continue</l>
<l>    endif</l>
<c>    *获取卡尺工具中心</c>
<l>    RowE:=RowXLD[j]</l>
<l>    ColE:=ColXLD[j] </l>
<c>    </c>
<c>    *如果圆心到检测方向直线的起点的距离大于圆心到检测方向直线的终点的距离，搜索方向由圆外指向圆心</c>
<c>    *如果圆心到检测方向直线的起点的距离不大于圆心到检测方向直线的终点的距离，搜索方向由圆心指向圆外</c>
<l>    if(DistanceStart&gt;DistanceEnd)</l>
<c>        *求卡尺工具的边缘搜索方向</c>
<c>        *求圆心指向边缘的矢量的角度</c>
<l>        tuple_atan2(-RowE+RowC, ColE-ColumnC, ATan)</l>
<c>        *角度反向</c>
<l>        ATan:=rad(180)+ATan</l>
<c>        *边缘搜索方向类型：'inner'搜索方向由圆外指向圆心；'outer'搜索方向由圆心指向圆外</c>
<l>        Direct:='inner'</l>
<l>    else</l>
<c>        *求卡尺工具的边缘搜索方向</c>
<c>        *求圆心指向边缘的矢量的角度</c>
<l>        tuple_atan2(-RowE+RowC, ColE-ColumnC, ATan)</l>
<c>        *边缘搜索方向类型：'inner'搜索方向由圆外指向圆心；'outer'搜索方向由圆心指向圆外</c>
<l>        Direct:='outer'</l>
<l>    endif</l>
<c>    </c>
<c>    *产生卡尺xld，并保持到显示对象</c>
<l>    gen_rectangle2_contour_xld(Rectangle1, RowE,  ColE, ATan, DetectHeight/2, DetectWidth/2)</l>
<l>    concat_obj(Regions, Rectangle1, Regions)</l>
<c>    </c>
<c>    *用箭头xld指示边缘搜索方向，并保持到显示对象</c>
<l>    if(i=0)</l>
<l>        RowL2:=RowE+DetectHeight/2*sin(-ATan)</l>
<l>        RowL1:=RowE-DetectHeight/2*sin(-ATan)</l>
<l>        ColL2:=ColE+DetectHeight/2*cos(-ATan)</l>
<l>        ColL1:=ColE-DetectHeight/2*cos(-ATan)</l>
<l>        gen_arrow_contour_xld (Arrow1, RowL1, ColL1, RowL2, ColL2, 25, 25)</l>
<l>        concat_obj (Regions, Arrow1, Regions)</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="m_draw_spoke">
<parameters>
<parameter id="DetectHeight"/>
<parameter id="DetectWidth"/>
<parameter id="Image"/>
<parameter id="ROICols"/>
<parameter id="ROIRows"/>
<parameter id="Regions"/>
<parameter id="Revolution"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
